#!/usr/bin/env perl

use strict;
use warnings;

use lib 'lib';

use Storable     ();
use JSON         ();
use Encode       ();
use Getopt::Long ();
use Publishr::ChannelFactory;
$|++;

my $config_file = 'publishr.json';
my $force_scenario;
my $force_channel;
my $dry_run;
Getopt::Long::GetOptions(
    'scenario=s' => \$force_scenario,
    'channel=s'  => \$force_channel,
    'dry-run'    => \$dry_run,
    'config=s'   => \$config_file
) or die("Error in command line arguments\n");

my ($message) = @ARGV;
die "Usage: <message>\n" unless $message;

$message = _parse_message(_slurp($message));

die "Error: First create '$config_file'\n" unless -f $config_file;
my $config = JSON::decode_json(_slurp($config_file));

my $factory = Publishr::ChannelFactory->new;

print "DRY RUN\n\n" if $dry_run;
foreach my $scenario (@{$config->{scenarios}}) {
    next if $force_scenario && $scenario->{name} ne $force_scenario;

    my ($access) =
      grep { $_->{name} eq $scenario->{access} } @{$config->{access}};
    next if $force_channel && $access->{type} ne $force_channel;

    print "Publishing to '$scenario->{name}'... ";

    my %options = (%{$access->{options} || {}}, %{$scenario->{options} || {}});

    my $channel = $factory->build($access->{type}, %options);
    eval {
        my $message_clone = Storable::dclone($message);
        $channel->publish($message_clone) unless $dry_run;
        print "OK\n";
    } or do {
        print "ERROR: $@\n";
    };
}

sub _parse_message {
    my ($content) = @_;

    $content = Encode::decode('UTF-8', $content);

    my $message = {};

    if ($content =~ s{^Status:\s*(.*?)$}{}ms) {
        $message->{status} = $1;
    }
    if ($content =~ s{^Link:\s*(.*?)$}{}ms) {
        $message->{link} = $1;
    }
    if ($content =~ s{^Image:\s*(.*?)$}{}ms) {
        $message->{image} = $1;
    }
    if ($content =~ s{^Tags:\s*(.*?)$}{}ms) {
        $message->{tags} = $1;
    }

    $content =~ s{^\s+}{};
    $content =~ s{\s+$}{};
    $message->{text} = $content;

    return $message;
}

sub _slurp {
    my ($file) = @_;

    die qq{Error: file '$file' does not exist\n} unless -f $file;

    my $content = '';
    open my $fh, '<', $file or die "Error: $!\n";
    while (defined(my $line = <$fh>)) {
        next if $line =~ m/^\s*#/;
        $content .= $line;
    }
    close $fh;

    return $content;
}
